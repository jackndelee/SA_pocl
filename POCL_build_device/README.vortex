#### Compiling pocl on RiscV ####

## Dependencies:

- sudo apt-get -y install \
  binutils build-essential libtool texinfo \
  gzip zip unzip patchutils curl git \
  make cmake ninja-build automake bison flex gperf \
  grep sed gawk python bc \
  zlib1g-dev libexpat1-dev libmpc-dev \
  libglib2.0-dev libfdt-dev libpixman-1-dev       
 
## Building RiscV GNU Toolchain (gcc, binutils, etc..)

- git clone --recursive https://github.com/riscv/riscv-gnu-toolchain
- cd riscv-gnu-toolchain
- mkdir build
- cd build
- export RISCV_TOOLCHAIN_PATH=/opt/riscv-gnu-toolchain
- ../configure --prefix=$RISCV_TOOLCHAIN_PATH --with-arch=rv32imf --with-abi=ilp32f
- make -j`nproc` && make -j`nproc` build-qemu

## Building LLVM for RiscV

- git clone -b release/10.x https://github.com/vortexgpgpu/llvm.git llvm
- cd llvm
- mkdir build
- cd build
- export LLVM_PREFIX=/opt/llvm-riscv
- cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DBUILD_SHARED_LIBS=True -DCMAKE_INSTALL_PREFIX=$LLVM_PREFIX -DLLVM_BUILD_TESTS=False -DDEFAULT_SYSROOT=$RISCV_TOOLCHAIN_PATH/riscv32-unknown-elf -DLLVM_DEFAULT_TARGET_TRIPLE="riscv32-unknown-elf" -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm
#- cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DBUILD_SHARED_LIBS=True -DCMAKE_INSTALL_PREFIX=$LLVM_PREFIX -DLLVM_BUILD_TESTS=False -DDEFAULT_SYSROOT=$RISCV_TOOLCHAIN_PATH/riscv32-unknown-elf -DLLVM_DEFAULT_TARGET_TRIPLE="riscv32-unknown-elf" -DLLVM_TARGETS_TO_BUILD="RISCV" ../llvm
- cmake --build . --target install

## Sanity test your new RISC-V LLVM

- echo -e '#include <stdio.h>\n int main(void) { printf("Hello world!\\n"); return 0; }' > hello.c
- clang hello.c
- qemu-riscv32 hello

## Building llvm-spirv
- git clone -b release/10.x  https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git
- cd llvm-spirv
- mkdir build
- cd build
- export LLVM_PREFIX=/opt/llvm-riscv
- cmake .. -DLLVM_DIR=$LLVM_PREFIX -DCMAKE_INSTALL_PREFIX=$LLVM_PREFIX
- make llvm-spirv -j`nproc`
- make install
# manually copy over llvm-spirv binary
- cp ./tools/llvm-spirv/llvm-spirv $LLVM_PREFIX/bin

## build pocl for Vortex

- git clone https://github.gatech.edu/casl/pocl.git
- cd pocl

- mkdir build_vortex_cc
- cd build_vortex_cc
- export POCL_CC_PATH=/opt/pocl/compiler
- cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$POCL_CC_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=ON -DWITH_LLVM_CONFIG=$LLVM_PREFIX/bin/llvm-config -DENABLE_VORTEX=ON -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON -DDEFAULT_ENABLE_ICD=OFF ..
- cmake --build . --target install

- mkdir build_vortex_rt
- cd build_vortex_rt
- export POCL_RT_PATH=/opt/pocl/runtime
- export VORTEX_DRIVER_INC=~/dev/vortex_live/driver/include
- export VORTEX_DRIVER_LIB=~/dev/vortex_live/driver/stub/libvortex.so
- cmake -G Ninja -DHOST_DEVICE_BUILD_HASH=riscv32-unknown-unknown-elf -DCMAKE_INSTALL_PREFIX=$POCL_RT_PATH -DCMAKE_BUILD_TYPE=Debug -DOCS_AVAILABLE=OFF -DVORTEX_DRIVER_INC=$VORTEX_DRIVER_INC -DVORTEX_DRIVER_LIB=$VORTEX_DRIVER_LIB -DENABLE_VORTEX=ON -DBUILD_TESTS=OFF -DPOCL_DEBUG_MESSAGES=ON -DDEFAULT_ENABLE_ICD=OFF ..
- cmake --build . --target install
